@startuml
class Month <<enumeration>>
Month : january
Month : february
Month : march
Month : april
Month : may
Month : june
Month : july
Month : august
Month : september
Month : october
Month : november
Month : december

Date : year: int
Date : month: Month
Date : day: int

Date --* Month

TimeOfDay : hour: int
TimeOfDay : minutes: int
TimeOfDay : seconds: double

TimeInstant : date: Date
TimeInstant : time: TimeOfDay

TimeInstant --* Date
TimeInstant --* TimeOfDay

TimeInterval : start: TimeInstant
TimeInterval : end: TimeInstant

TimeInterval --* TimeInstant

class StandardFunctions <<interface>>
StandardFunctions : uri: string

StandardFunctions --|> Function

class TextManipulationFunctions <<interface>>
TextManipulationFunctions : caseInsensitize(string s) string
TextManipulationFunctions : accentInsensitize(string s) string
TextManipulationFunctions : lowerCase(string s) string
TextManipulationFunctions : upperCase(string s) string
TextManipulationFunctions : concatenate(string a, string b) string
TextManipulationFunctions : substitute(string s, string a, string b) string
TextManipulationFunctions : format(string f, ...) string

TextManipulationFunctions --|> StandardFunctions

class GeometryManipulationFunctions <<interface>>
GeometryManipulationFunctions : s_intersection(Geometry a, Geometry b) Geometry
GeometryManipulationFunctions : s_union(Geometry a, Geometry b) Geometry
GeometryManipulationFunctions : s_subtraction(Geometry a, Geometry b) Geometry
GeometryManipulationFunctions : s_buffer(Geometry a, double d) Geometry

GeometryManipulationFunctions --|> StandardFunctions
GeometryManipulationFunctions --> Geometry

class SpatialRelationFunctions <<interface>>
SpatialRelationFunctions : s_intersects(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_contains(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_crosses(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_disjoint(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_equals(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_overlaps(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_touches(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_within(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_covers(Geometry a, Geometry b) bool
SpatialRelationFunctions : s_coveredBy(Geometry a, Geometry b) bool

SpatialRelationFunctions --|> StandardFunctions
SpatialRelationFunctions --> Geometry

class TemporalRelationFunctions <<interface>>
TemporalRelationFunctions : t_after(TimeInstant a, TimeInstant b) bool
TemporalRelationFunctions : t_before(TimeInstant a, TimeInstant b) bool
TemporalRelationFunctions : t_disjoint(TimeInstant a, TimeInstant b) bool
TemporalRelationFunctions : t_equals(TimeInstant a, TimeInstant b) bool
TemporalRelationFunctions : t_intersects(TimeInstant a, TimeInstant b) bool
TemporalRelationFunctions : t_after(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_before(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_disjoint(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_equals(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_intersects(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_contains(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_during(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_finishedBy(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_finishes(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_meets(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_meetBy(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_overlappedBy(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_overlaps(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_startedBy(TimeInterval a, TimeInterval b) bool
TemporalRelationFunctions : t_starts(TimeInterval a, TimeInterval b) bool

TemporalRelationFunctions --|> StandardFunctions
TemporalRelationFunctions --> TimeInstant
TemporalRelationFunctions --> TimeInterval

class ArrayRelationFunctions <<interface>>
ArrayRelationFunctions : a_containedBy(array a, array b) bool
ArrayRelationFunctions : a_contains(array a, array b) bool
ArrayRelationFunctions : a_equals(array a, array b) bool
ArrayRelationFunctions : a_overlaps(array a, array b) bool

ArrayRelationFunctions --|> StandardFunctions
ArrayRelationFunctions --> ArrayExpression
@enduml


